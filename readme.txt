-*-outline-*-

git用文字エンコーディング調整ラッパー
AKIYAMA Kouhei
2010-04-23

*目的

gitコマンドをラップして入出力の文字コード(文字エンコーディング)を統一します。

具体的には次のようにことを行います。

- git diff 実行時、標準出力を端末のエンコーディングに統一する。
- git apply 実行時、標準入力を端末のエンコーディングからファイルごとのエンコーディングに分解する。

ファイルごとのエンコーディングは.gitattributesのencoding=属性から求めます。
指定がないときのエンコーディングはgit-encwrapper.cppのdefault_file_encodingのところに書いてあります。
端末のエンコーディングはgit-encwrapper.cppのterminal_encodingのところに書いてあります。

*背景

たとえば、gitで管理している二つのファイルがあります。一つはutf-8で書かれており、もう一つはiso-2022-jpで書かれています。この二つのファイルを両方修正し、git diffを実行すると、どちらかまたは両方が文字化けしてしまいます。たとえば端末が認識する文字エンコーディングがutf-8の場合、iso-2022-jpで書かれた方が文字化けします。

このような状況は、文字エンコーディングを処理するプログラムとそのテストケースを作る場合によく起こります。たとえばメールのテキストを処理するプログラムを作るとします。プログラムのソースコードはutf-8で記述したとします。ソース内には日本語で作者名やコメントが書かれているかもしれません。一方テスト用にiso-2022-jpで書かれているテキストを用意しておきます。このような場合に、もしテキスト内の特定の文字シーケンスを正しく処理できないミスが見つかったらどうでしょう。テストケースとなるテキストファイルにその特定の文字シーケンスを書き加え、テストし、ソースコード内のミスを特定し、修正するでしょう。そしてコミットする前にgit diffすると、文字化けを起こすわけです。

また、もしエンコーディングが統一された差分(パッチ)が出力できたとしても、その出力を流用して一部を切り出し、git applyでパッチを適用しようとすると、元のエンコーディングと異なっているため、パッチが正しく当たらないことになります。この問題を避けるため、git applyの実行時にdiffとは逆の変換を行う必要があります。私はMeadow(EmacsのWindows版亜種)上でmagit.elを使用しているのですが、部分的なstageをしたいとき、まさにこの変換が必要になります。

*ビルド方法

Cygwin上のgcc4でビルドしています。

boostはxpressiveを使っているので、比較的新しいものが必要です。

