-*-outline-*-

git用文字エンコーディング調整ラッパー
AKIYAMA Kouhei
2010-04-23

*目的

gitコマンドをラップして入出力の文字コード(文字エンコーディング)を統一します。

具体的には次のようなことを行います。

- git diff 実行時、gitの標準出力から出る差分(パッチ)を端末のエンコーディングで統一する。
- git apply 実行時、gitの標準入力へ入る差分(パッチ)を端末のエンコーディングからファイルごとのエンコーディングに分解する。

ファイルごとのエンコーディングは.gitattributesのencoding=属性から求めます。
指定がないときのエンコーディングはgit-encwrapper.cppのdefault_file_encodingのところに書いてあります。
端末のエンコーディングはgit-encwrapper.cppのterminal_encodingのところに書いてあります。

*背景

たとえば、gitで管理している二つのファイルがあります。一つはutf-8で書かれており、もう一つはiso-2022-jpで書かれています。この二つのファイルを両方修正し、git diffを実行すると、どちらかまたは両方が文字化けしてしまいます。たとえば端末が認識する文字エンコーディングがutf-8の場合、iso-2022-jpで書かれた方が文字化けします。

このような状況は、文字エンコーディングを処理するプログラムとそのテストケースを作る場合に起こりえます。たとえばメールのテキストを処理するプログラムを作るとします。プログラムのソースコードはutf-8で記述したとします。ソース内には日本語で作者名やコメントが書かれているかもしれません。一方テスト用にiso-2022-jpで書かれているテキストを用意しておきます。このような状況で、もしテキスト内の特定の文字シーケンスを正しく処理できないミスが見つかったらどうでしょう。テストケースとなるテキストファイルにその特定の文字シーケンスを書き加え、テストし、ソースコード内のミスを特定し、修正するでしょう。そしてコミットする前にgit diffすると、文字化けを起こすわけです。

また、もしエンコーディングが統一された差分(パッチ)が出力できたとしても、その出力を流用して一部を切り出し、git applyでパッチを適用しようとすると、元のエンコーディングと異なっているため、パッチが正しく当たらないことになります。この問題を避けるため、git applyの実行時にdiffとは逆の変換を行う必要があります。私はMeadow(EmacsのWindows版亜種)上でmagit.elを使用しているのですが、部分的なstageをしたいとき、まさにこの変換が必要になります。

*ビルド・インストール方法

確認はCygwin上でしか行っていません。

Cygwin上のgcc4でビルドしています。

boostはxpressiveを使っているので、比較的新しいものが必要です。boost.orgから最新版をダウンロードし、インクルードパスを通してください。Cygwinならば、/usr/include/boostがライブラリ展開後のboostディレクトリを指すようにシンボリックリンクを張ってください。必要なのはヘッダーファイルだけなので、ライブラリのビルドは不要です。

libiconvが必要です。Cygwinならばパッケージからインストールしてください。

make releaseでgit-encwrapper.exeができあがります。パスの通った場所へ移動してください。

*言い訳

pipeやfork等、UNIXっぽいプログラミングはあまりやったことがないので、変なことをしているかもしれません。

git自体まだ触りくらいしか学んでいないので、色々誤解しているところがあるかもしれません。マージの仕方とかもまだ知らないし。

gitコマンドが標準でこのくらいのことが出来ないなんて、未だに信じられません。誰も気がつかないなんてことは無いと思うのですが。たぶん私が知らないだけで、こんなことをしなくても良い方法があるんだと思います。知っている人は教えてください。

gitのソースコードから属性取得部分を拝借しました。libgitディレクトリの中です。出来るだけ余計なものが入らないように、不要な部分は#if GIT_ENCWRAPPER_CUTOFF〜#endifでカットしてあります。テキトーに処理したので、変な動作をしたらすみません。git_path関数を何もしない関数に置き換えてしまっているので、カレントディレクトリがリポジトリがあるディレクトリじゃないとうまく動かないかもしれません。

端末のエンコーディングやファイルのデフォルトのエンコーディングはソースコード内に埋め込んであります。すみません。変更したい場合は直接いじってください。

xpressiveを使って無駄にビルドしづらくしてすみません。最近集中力が無くて、細かい文字処理を自分で書く気にどうしてもなれなくて、手元にあったxpressiveを使ってしまいました。xpressiveはお手軽です。regexのようにライブラリをビルド・リンクする必要もないし。
